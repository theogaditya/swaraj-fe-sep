generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Citizen model
model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  name                  String
  phoneNumber           String    @unique
  dateOfBirth           DateTime
  password              String
  aadhaarId             String
  preferredLanguage     String    @default("English")
  disability            String?   @default("None")
  consentDataCollection Boolean   @default(true)
  dateOfCreation        DateTime  @default(now())
  lastUpdated           DateTime  @updatedAt
  status                userStatus    @default(ACTIVE)
  
  // Relationships
  location              UserLocation?
  complaints            Complaint[]      @relation("ComplainantComplaints")
  upvotes               Upvote[]
  auditLogsCreated      AuditLog[]       @relation("LogCreator")
  
}
enum userStatus {
  ACTIVE
  DELETED
  SUSPENDED
}
// User Location model
model UserLocation {
  id          String    @id @default(uuid())
  userId      String    @unique
  pin         String
  district    String
  city        String
  locality    String
  street      String
  municipal   String
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_locations")
}
enum Status{
  ACTIVE
  INACTIVE
  SUSPENDED
}
enum AccessLevel {
  SUPER_ADMIN
  SUPER_MUNICIPAL_ADMIN
  SUPER_STATE_ADMIN
  DEPT_MUNICIPAL_ADMIN
  DEPT_STATE_ADMIN
  AGENT
}
enum Department {
  INFRASTRUCTURE
  EDUCATION
  REVENUE
  HEALTH
  WATER_SUPPLY_SANITATION
  ELECTRICITY_POWER
  TRANSPORTATION
  MUNICIPAL_SERVICES
  POLICE_SERVICES
  ENVIRONMENT
  HOUSING_URBAN_DEVELOPMENT
  SOCIAL_WELFARE
  PUBLIC_GRIEVANCES
}
// Agent model
model Agent {
  id                 String    @id @default(uuid())
  email              String    @unique
  fullName           String
  employeeId         String    @default(uuid()) @unique
  password           String
  phoneNumber        String
  officialEmail      String    @unique
  department         Department
  municipality       String
  accessLevel        AccessLevel @default(AGENT)
  workloadLimit      Int       @default(10)
  currentWorkload    Int       @default(0)
  availabilityStatus String    @default("At Work")
  dateOfCreation     DateTime  @default(now())
  lastUpdated        DateTime  @updatedAt
  status             Status    @default(ACTIVE)
  lastLogin          DateTime?
  // Performance metrics
  resolutionRate     Float     @default(0)
  avgResolutionTime  String?
  collaborationMetric Int      @default(0)
  
  // Relationships
  assignedComplaints    Complaint[]  @relation("AssignedAgentComplaints")
  coAssignedComplaints  Complaint[]  @relation("CoAssignedAgentComplaints")
  managedByMunicipal    DepartmentMunicipalAdmin? @relation("MunicipalAdminToAgents", fields: [managedByMunicipalId], references: [id])
  managedByMunicipalId  String?
}
// Department Municipal Admin model
model DepartmentMunicipalAdmin {
  id                String    @id @default(uuid())
  fullName          String
  adminId           String    @default(uuid())
  officialEmail     String    @unique
  phoneNumber       String
  password          String
  department        Department
  municipality      String
  accessLevel       AccessLevel @default(DEPT_MUNICIPAL_ADMIN)
  dateOfCreation    DateTime  @default(now())
  lastUpdated       DateTime  @updatedAt
  status            Status    @default(ACTIVE)
  lastLogin         DateTime?
  workloadLimit      Int       @default(10)
  currentWorkload    Int       @default(0)
  
  // Performance metrics
  resolutionRate    Float     @default(0)
  slaComplianceRate Float?    @default(0)
  escalationCount   Int       @default(0)
  
  // Relationships
  managedAgents        Agent[]        @relation("MunicipalAdminToAgents")
  managedComplaints    Complaint[]    @relation("MunicipalAdminToComplaints")
  communityModeration  Complaint[]    @relation("MunicipalAdminModeratedComplaints")
  newsUpdates          NewsUpdate[]
  managedByStateAdmin  DepartmentStateAdmin? @relation("StateAdminToMunicipalAdmin", fields: [managedByStateAdminId], references: [id])
  managedByStateAdminId String?
  managedBySuperMunicipal SuperMunicipalAdmin? @relation("SuperMunicipalToDepAdmin", fields: [managedBySuperMunicipalId], references: [id])
  managedBySuperMunicipalId String?
  
  @@map("department_municipal_admins")
}
// Super Municipal Admin model
model SuperMunicipalAdmin {
  id                 String    @id @default(uuid())
  fullName           String
  adminId            String    @default(uuid())
  officialEmail      String    @unique
  password           String
  phoneNumber        String?
  municipality       String
  accessLevel        AccessLevel @default(SUPER_MUNICIPAL_ADMIN)
  dateOfCreation     DateTime  @default(now())
  lastUpdated        DateTime  @updatedAt
  status             Status    @default(ACTIVE)
  lastLogin          DateTime?
  
  // Performance metrics
  municipalityResolutionRate Float @default(0)
  crossDepartmentSuccess     Int   @default(0)
  
  // Relationships
  managedDepartmentAdmins DepartmentMunicipalAdmin[] @relation("SuperMunicipalToDepAdmin")
  crossDepartmentIssues   Complaint[]                @relation("SuperMunicipalToCrossDeptIssues")
  managedBySuperState     SuperStateAdmin?           @relation("SuperStateToSuperMunicipal", fields: [managedBySuperStateId], references: [id])
  managedBySuperStateId   String?
  
  @@map("super_municipal_admins")
}
// Department State Admin model
model DepartmentStateAdmin {
  id                  String    @id @default(uuid())
  fullName            String
  adminId             String    @default(uuid())
  officialEmail       String    @unique
  password            String
  phoneNumber         String?
  department          Department
  state               String
  accessLevel         AccessLevel @default(DEPT_STATE_ADMIN)
  dateOfCreation      DateTime  @default(now())
  lastUpdated         DateTime  @updatedAt
  status              Status    @default(ACTIVE)
  lastLogin           DateTime?
  
  // Performance metrics
  stateResolutionRate    Float  @default(0)
  escalationCount     Int  @default(0)
  
  // Relationships
  managedMunicipalities  String[]  @default([])
  managedMunicipalAdmins DepartmentMunicipalAdmin[] @relation("StateAdminToMunicipalAdmin")
  escalatedComplaints    Complaint[]                @relation("StateAdminToEscalatedComplaints")
  regionalWorkflows      RegionalWorkflow[]
  managedCategories      Category[]
  managedBySuperState    SuperStateAdmin?           @relation("SuperStateToStateAdmin", fields: [managedBySuperStateId], references: [id])
  managedBySuperStateId  String?
  
  @@map("department_state_admins")
}
// Super State Admin model
model SuperStateAdmin {
  id                 String    @id @default(uuid())
  fullName           String
  adminId            String    @default(uuid())
  officialEmail      String    @unique
  phoneNumber        String?
  password           String
  state              String
  accessLevel        AccessLevel @default(SUPER_STATE_ADMIN)
  dateOfCreation     DateTime  @default(now())
  lastUpdated        DateTime  @updatedAt
  status             Status    @default(ACTIVE)
  lastLogin          DateTime?
  
  // Performance metrics
  stateResolutionRate    Float  @default(0)
  crossDepartmentSuccess Int    @default(0)
  
  // Relationships
  managedDepartmentAdmins DepartmentStateAdmin[]    @relation("SuperStateToStateAdmin")
  managedSuperMunicipalAdmins SuperMunicipalAdmin[] @relation("SuperStateToSuperMunicipal")
  escalatedComplaints     Complaint[]               @relation("SuperStateToEscalatedComplaints")
  managedBySuperAdmin     SuperAdmin?               @relation("SuperAdminToSuperState", fields: [managedBySuperAdminId], references: [id])
  managedBySuperAdminId   String?
  
  @@map("super_state_admins")
}
// Super Admin model
model SuperAdmin {
  id                String    @id @default(uuid())
  fullName          String
  adminId           String    @default(uuid())
  officialEmail     String    @unique
  phoneNumber       String?
  password          String
  accessLevel       AccessLevel @default(SUPER_ADMIN)
  dateOfCreation    DateTime  @default(now())
  lastUpdated       DateTime  @updatedAt
  status            Status    @default(ACTIVE)
  lastLogin         DateTime?
  
  // Relationships
  managedCategories     Category[]
  managedSuperStateAdmins SuperStateAdmin[]    @relation("SuperAdminToSuperState")
  managedComplaints     Complaint[]
  
  @@map("super_admins")
}
// Category models and relationships
model Category {
  id                  String    @id @default(uuid())
  name                String    @unique
  subCategories       String[]
  learnedSubCategories String[]
  assignedDepartment  String
  creationDate        DateTime  @default(now())
  lastUpdated         DateTime  @updatedAt
  
  // Relationships
  complaints          Complaint[]
  createdBySuperAdmin SuperAdmin?  @relation(fields: [createdBySuperAdminId], references: [id])
  createdBySuperAdminId String?
  managedByDeptStateAdmin DepartmentStateAdmin? @relation(fields: [managedByDeptStateAdminId], references: [id])
  managedByDeptStateAdminId String?
  
}
// Complaints
model Complaint {
  id                      String    @id @default(uuid())
  submissionDate          DateTime  @default(now())
  seq                     Int       @unique @default(autoincrement())
  complainantId           String    
  categoryId              String
  subCategory             String
  standardizedSubCategory String?
  description             String
  urgency                 ComplaintUrgency @default(LOW) 
  attachmentUrl           String?
  assignedDepartment      String
  status                  ComplaintStatus @default(UNDER_PROCESSING)
  sla                     String?
  upvoteCount             Int       @default(0)
  isPublic                Boolean   @default(true)
  escalationLevel         String?
  dateOfResolution        DateTime?
  
  // Relationships
  complainant             User      @relation("ComplainantComplaints", fields: [complainantId], references: [id])
  category                Category  @relation(fields: [categoryId], references: [id])
  location                ComplaintLocation?
  
  // Agent relationships
  assignedAgent           Agent?    @relation("AssignedAgentComplaints", fields: [assignedAgentId], references: [id])
  assignedAgentId         String?
  coAssignedAgents        Agent[]   @relation("CoAssignedAgentComplaints")
  
  // Admin relationships
  managedByMunicipalAdmin DepartmentMunicipalAdmin? @relation("MunicipalAdminToComplaints", fields: [managedByMunicipalAdminId], references: [id])
  managedByMunicipalAdminId String?
  moderatedByMunicipalAdmin DepartmentMunicipalAdmin? @relation("MunicipalAdminModeratedComplaints", fields: [moderatedByMunicipalAdminId], references: [id])
  moderatedByMunicipalAdminId String?
  crossDeptIssueSuperMunicipal SuperMunicipalAdmin? @relation("SuperMunicipalToCrossDeptIssues", fields: [crossDeptIssueSuperMunicipalId], references: [id])
  crossDeptIssueSuperMunicipalId String?
  escalatedToStateAdmin DepartmentStateAdmin? @relation("StateAdminToEscalatedComplaints", fields: [escalatedToStateAdminId], references: [id])
  escalatedToStateAdminId String?
  escalatedToSuperStateAdmin SuperStateAdmin? @relation("SuperStateToEscalatedComplaints", fields: [escalatedToSuperStateAdminId], references: [id])
  escalatedToSuperStateAdminId String?
  managedBySuperAdmin SuperAdmin? @relation(fields: [managedBySuperAdminId], references: [id])
  managedBySuperAdminId String?
  
  // Other relationships
  upvotes                 Upvote[]
  auditLogs               AuditLog[]
}
enum ComplaintStatus {
  REGISTERED
  UNDER_PROCESSING
  FORWARDED
  ON_HOLD
  COMPLETED
  REJECTED
  ESCALATED_TO_MUNICIPAL_LEVEL 
  ESCALATED_TO_STATE_LEVEL 
  DELETED
}

enum ComplaintUrgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
// Complaint Location model 
model ComplaintLocation {
  id          String    @id @default(uuid())
  complaintId String    @unique
  pin         String
  district    String
  city        String
  locality    String
  street      String?
  latitude    Float?
  longitude   Float?
  
  // Relationships
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  @@map("complaint_locations")
}
// Upvotes for complaints
model Upvote {
  id          String    @id @default(uuid())
  userId      String
  complaintId String
  timestamp   DateTime  @default(now())
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  @@unique([userId, complaintId])
  @@map("upvotes")
}
// News Updates 
model NewsUpdate {
  id          String    @id @default(uuid())
  title       String
  content     String
  date        DateTime  @default(now())
  createdById String
  
  // Relationships
  createdBy   DepartmentMunicipalAdmin @relation(fields: [createdById], references: [id])
  
  @@map("news_updates")
}
// Audit Log 
model AuditLog {
  id          String    @id @default(uuid())
  action      String    //Enum Reassingment and Escalation
  userId      String
  complaintId String?
  timestamp   DateTime  @default(now())
  details     String?
  
  // Relationships
  user        User      @relation("LogCreator", fields: [userId], references: [id])
  complaint   Complaint? @relation(fields: [complaintId], references: [id])
  
  @@map("audit_logs")
}
// Regional Workflows a.k.a. sla definitions 
model RegionalWorkflow {
  id          String    @id @default(uuid())
  state       String
  municipality String?
  category    String
  sla         String
  
  // Relationships
  createdBy   DepartmentStateAdmin @relation(fields: [createdById], references: [id])
  createdById String
  
  @@map("regional_workflows")
}